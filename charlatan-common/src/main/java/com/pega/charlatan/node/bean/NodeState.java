// File generated by hadoop record compiler. Do not edit.
/**
 * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE
 * file distributed with this work for additional information regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
 * License.  You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */

package com.pega.charlatan.node.bean;


import com.pega.charlatan.io.Serializable;
import com.pega.charlatan.io.ZookeeperWriter;

import java.io.IOException;
import java.util.Objects;

public class NodeState implements Serializable {
	private long czxid;
	private long mzxid;

	/**
	 * The time in milliseconds from epoch when this znode was created.
	 */
	private long ctime;

	/**
	 * The time in milliseconds from epoch when this znode was last modified.
	 */
	private long mtime;

	/**
	 * The number of changes to the data of this znode.
	 */
	private int version;

	/**
	 * The number of changes to the children of this znode.
	 */
	private int cversion;

	private int aversion;

	/**
	 * The session id of the owner of this znode if the znode is an ephemeral node. If it is not an ephemeral node, it will be zero.
	 */
	private long ephemeralOwner;
	private int dataLength;
	private int numChildren;
	private long pzxid;

	public NodeState() {
	}

	public NodeState(
			long czxid,
			long mzxid,
			long ctime,
			long mtime,
			int version,
			int cversion,
			int aversion,
			long ephemeralOwner,
			int dataLength,
			int numChildren,
			long pzxid) {
		this.czxid = czxid;
		this.mzxid = mzxid;
		this.ctime = ctime;
		this.mtime = mtime;
		this.version = version;
		this.cversion = cversion;
		this.aversion = aversion;
		this.ephemeralOwner = ephemeralOwner;
		this.dataLength = dataLength;
		this.numChildren = numChildren;
		this.pzxid = pzxid;
	}

	public long getMzxid() {
		return mzxid;
	}

	public void setMzxid(long mzxid) {
		this.mzxid = mzxid;
	}

	public int getVersion() {
		return version;
	}

	public void setVersion(int m_) {
		version = m_;
	}

	public int getCversion() {
		return cversion;
	}

	public void setCversion(int m_) {
		cversion = m_;
	}

	public long getCzxid() {
		return czxid;
	}

	public void setCzxid(long czxid) {
		this.czxid = czxid;
	}

	public long getCtime() {
		return ctime;
	}

	public void setCtime(long m_) {
		ctime = m_;
	}

	public long getMtime() {
		return mtime;
	}

	public void setMtime(long m_) {
		mtime = m_;
	}

	public int getAversion() {
		return aversion;
	}

	public void setAversion(int aversion) {
		this.aversion = aversion;
	}

	public long getEphemeralOwner() {
		return ephemeralOwner;
	}

	public void setEphemeralOwner(long m_) {
		ephemeralOwner = m_;
	}

	public int getDataLength() {
		return dataLength;
	}

	public void setDataLength(int m_) {
		dataLength = m_;
	}

	public int getNumChildren() {
		return numChildren;
	}

	public void setNumChildren(int m_) {
		numChildren = m_;
	}

	public long getPzxid() {
		return pzxid;
	}

	public void setPzxid(long pzxid) {
		this.pzxid = pzxid;
	}

	public String toString() {
		StringBuilder s = new StringBuilder();
		s.append(czxid).append(",czxid;")
				.append(mzxid).append(",mzxid;")
				.append(ctime).append(",ctime;")
				.append(mtime).append(",mtime;")
				.append(version).append(",version;")
				.append(cversion).append(",cversion;")
				.append(aversion).append(",aversion;")
				.append(ephemeralOwner).append(",ephemeralOwner;")
				.append(numChildren).append(",numChildren;")
				.append(pzxid).append(",pzxid;")
				.append(aversion).append(",aversion;");

		return s.toString();
	}

	@Override
	public void serialize(ZookeeperWriter writer) throws IOException {
		writer.writeLong(czxid);
		writer.writeLong(mzxid);
		writer.writeLong(ctime);
		writer.writeLong(mtime);
		writer.writeInt(version);
		writer.writeInt(cversion);
		writer.writeInt(aversion);
		writer.writeLong(ephemeralOwner);
		writer.writeInt(dataLength);
		writer.writeInt(numChildren);
		writer.writeLong(pzxid);
	}

	public boolean equals(Object obj) {
		if (obj instanceof NodeState) {
			if (obj == this) {
				return true;
			}

			NodeState other = (NodeState) obj;
			return Objects.equals(czxid, other.czxid) &&
					Objects.equals(mzxid, other.mzxid) &&
					Objects.equals(ctime, other.ctime) &&
					Objects.equals(mtime, other.mtime) &&
					Objects.equals(version, other.version) &&
					Objects.equals(cversion, other.cversion) &&
					Objects.equals(aversion, other.aversion) &&
					Objects.equals(ephemeralOwner, other.ephemeralOwner) &&
					Objects.equals(dataLength, other.dataLength) &&
					Objects.equals(numChildren, other.numChildren) &&
					Objects.equals(pzxid, other.pzxid);


		}
		return false;
	}

	public int hashCode() {
		return Objects.hash(czxid, mzxid, ctime, mtime, version, cversion, aversion, ephemeralOwner, dataLength, numChildren, pzxid);
	}
}

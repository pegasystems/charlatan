// File generated by hadoop record compiler. Do not edit.
/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.zookeeper.data;


import com.pega.charlatan.io.Deserializable;
import com.pega.charlatan.io.ZookeeperReader;

public class ACL implements Deserializable {
	private int perms;
	private Id id;

	public ACL() {
	}

	public ACL(
			int perms,
			org.apache.zookeeper.data.Id id) {
		this.perms = perms;
		this.id = id;
	}

	public static String signature() {
		return "LACL(iLId(ss))";
	}

	public int getPerms() {
		return perms;
	}

	public void setPerms(int m_) {
		perms = m_;
	}

	public org.apache.zookeeper.data.Id getId() {
		return id;
	}

	public void setId(org.apache.zookeeper.data.Id m_) {
		id = m_;
	}

	public String toString() {
		throw new RuntimeException("Unimplemeneted");
	}

	@Override
	public void deserialize(ZookeeperReader reader) throws java.io.IOException {
		perms=reader.readInt();
		id= new org.apache.zookeeper.data.Id();
		id.deserialize(reader);
	}

	public int compareTo(Object peer_) throws ClassCastException {
		if (!(peer_ instanceof ACL)) {
			throw new ClassCastException("Comparing different types of records.");
		}
		ACL peer = (ACL) peer_;
		int ret = 0;
		ret = (perms == peer.perms) ? 0 : ((perms < peer.perms) ? -1 : 1);
		if (ret != 0) return ret;
		ret = id.compareTo(peer.id);
		if (ret != 0) return ret;
		return ret;
	}

	public boolean equals(Object peer_) {
		if (!(peer_ instanceof ACL)) {
			return false;
		}
		if (peer_ == this) {
			return true;
		}
		ACL peer = (ACL) peer_;
		boolean ret = false;
		ret = (perms == peer.perms);
		if (!ret) return ret;
		ret = id.equals(peer.id);
		if (!ret) return ret;
		return ret;
	}

	public int hashCode() {
		int result = 17;
		int ret;
		ret = (int) perms;
		result = 37 * result + ret;
		ret = id.hashCode();
		result = 37 * result + ret;
		return result;
	}
}
